from cleanfid import fid
import torch
import numpy as np
#import autoencoder_fid as autoencoder

def get_clean_fid_score(model, dataset, device, num_gen=5000):
    if dataset.lower() == "mnist":
        dataset_name = 'mnist_test'
    elif dataset.lower() == "fashionmnist":
        dataset_name = 'fashion_test'
    elif dataset.lower() == 'celeba':
        dataset_name = 'celeba_valid'
    elif dataset.lower() == 'cifar10':
        dataset_name = 'cifar10_test'
    elif dataset.lower() == 'miad_metal_welding':
        dataset_name = 'miad_metal_welding_test'
    else:
        raise ValueError()

    # function that accepts a latent and returns an image in range[0,255]
    def sample_from_vae(z):
        """
        z : dummy latent value (batch_size, z_dim)
        """
        batch_size = z.shape[0]
        sampled_x, _ = model.sample(batch_size)
        sampled_x = (sampled_x+1)/2 # 0 to 1
        sampled_x = 255 * sampled_x # 0 to 255
        if sampled_x.shape[1] == 1:
            sampled_x = sampled_x.repeat(1,3,1,1) # gray to RGB
        return sampled_x

    score = compute_fid(custom_feat_extractor=model, gen=sample_from_vae, dataset_name=dataset_name,
            num_gen=num_gen, dataset_split="custom", batch_size=32, device=device, z_dim=2)

    return score


def compute_fid(fdir1=None, fdir2=None, gen=None,
            mode="clean", model_name="inception_v3", num_workers=2,
            batch_size=32, device=torch.device("cuda"), dataset_name="FFHQ",
            dataset_split="custom", num_gen=5000, z_dim=2,
            custom_feat_extractor=None, verbose=True,
            custom_image_tranform=None, custom_fn_resize=None, use_dataparallel=True):
    # build the feature extractor based on the mode and the model to be used
    feat_model = custom_feat_extractor

    if gen is not None:
        if verbose:
            print(f"compute FID of a model with {dataset_name} statistics")
        score = fid_model(gen, dataset_name, dataset_split,
                model=feat_model, model_name=model_name, z_dim=z_dim, num_gen=num_gen,
                mode=mode, num_workers=num_workers, batch_size=batch_size,
                custom_image_tranform=custom_image_tranform, custom_fn_resize=custom_fn_resize,
                device=device, verbose=verbose)
        return score
    else:
        raise ValueError("invalid combination of directories and models entered")

def fid_model(G, dataset_name, dataset_split,
              model=None, model_name="inception_v3", z_dim=512, num_gen=50_000,
              mode="clean", num_workers=0, batch_size=128,
              device=torch.device("cuda"), verbose=True,
              custom_image_tranform=None, custom_fn_resize=None):
    # Load reference FID statistics (download if needed)
    ref_mu, ref_sigma = get_reference_statistics(dataset_name,
                            mode=mode, model_name=model_name,
                            seed=0, split=dataset_split)
    # Generate features of images generated by the model
    np_feats = get_model_features(G, model, mode=mode,
        z_dim=z_dim, num_gen=num_gen,
        batch_size=batch_size, device=device, verbose=verbose,
        custom_image_tranform=custom_image_tranform, custom_fn_resize=custom_fn_resize)
    mu = np.mean(np_feats, axis=0)
    sigma = np.cov(np_feats, rowvar=False)
    fid = frechet_distance(mu, sigma, ref_mu, ref_sigma)
    return fid

def get_reference_statistics(name, res, mode="clean", model_name="inception_v3", seed=0, split="test", metric="FID"):
    fpath = check_download_url(local_folder=stats_folder, url=url)
    stats = np.load(fpath)
    mu, sigma = stats["mu"], stats["sigma"]
    return mu, sigma

def get_clean_fid_score_ann(model, dataset, device, num_gen=5000):
    if dataset.lower() == "mnist":
        dataset_name = 'mnist_test'
    elif dataset.lower() == "fashionmnist":
        dataset_name = 'fashion_test'
    elif dataset.lower() == 'celeba':
        dataset_name = 'celeba_valid'
    elif dataset.lower() == 'cifar10':
        dataset_name = 'cifar10_test'
    elif dataset.lower() == 'miad_metal_welding':
        dataset_name == 'miad_metal_welding'
    else:
        raise ValueError()

    # function that accepts a latent and returns an image in range[0,255]
    def sample_from_vae(z):
        """
        z : dummy latent value (batch_size, z_dim)
        """
        batch_size = z.shape[0]
        sampled_x= model.sample(batch_size, device)
        sampled_x = (sampled_x+1)/2 # 0 to 1
        sampled_x = 255 * sampled_x # 0 to 255
        if sampled_x.shape[1] == 1:
            sampled_x = sampled_x.repeat(1,3,1,1) # gray to RGB
        return sampled_x

    score = fid.compute_fid(gen=sample_from_vae, dataset_name=dataset_name,
            num_gen=num_gen, dataset_split="custom", batch_size=32, device=device, z_dim=2)

    return score